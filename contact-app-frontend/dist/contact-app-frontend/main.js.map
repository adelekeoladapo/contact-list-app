{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dto/ListRequest.ts","./src/app/services/contact.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {ContactService} from './services/contact.service';\nimport {Contact} from './dto/Contact';\nimport {ListRequest} from './dto/ListRequest';\nimport {ContactListResponse} from './dto/ContactListResponse';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n    contactList: Contact[];\n    listRequest: ListRequest;\n    listResponse: ContactListResponse;\n    n = 1;\n\n    constructor(public contactService: ContactService, public domainSanitizer: DomSanitizer) {\n       this.listRequest = new ListRequest(1, 5, 'name', 'ASC', '');\n    }\n\n    ngOnInit(): void {\n      this.initContactList(this.listRequest);\n    }\n\n    initContactList(listRequest: ListRequest): void {\n        this.contactService.getContactList(listRequest).subscribe(data => {\n            this.listResponse = data;\n        });\n    }\n\n    goNext(): void {\n        this.listRequest.page++;\n        this.initContactList(this.listRequest);\n    }\n\n    goPrevious(): void {\n        this.listRequest.page--;\n        this.initContactList(this.listRequest);\n    }\n\n    getTotalNumberOfPages(): number {\n        return Math.ceil(this.listResponse?.total / this.listResponse?.limit);\n    }\n\n\n\n}\n","<div class=\"app-container\">\n    <div class=\"title\">Simple Contact List</div>\n    <div class=\"controls\">\n        <div class=\"control\">\n            <label>No. of Items </label>\n            <select name=\"numberOfItems\" id=\"numberOfItems\" [(ngModel)]=\"listRequest.limit\" (change)=\"initContactList(listRequest)\">\n                <option>5</option>\n                <option>10</option>\n                <option>20</option>\n                <option>50</option>\n                <option>100</option>\n            </select>\n        </div>\n        <div class=\"control\">\n            <label>Order </label>\n            <select name=\"sortOrder\" id=\"sortOrder\" [(ngModel)]=\"listRequest.sortOrder\" (change)=\"initContactList(listRequest)\">\n                <option value=\"ASC\">Ascending</option>\n                <option value=\"DESC\">Descending</option>\n            </select>\n        </div>\n        <div class=\"control\">\n            <label>Search </label>\n            <input type=\"text\" placeholder=\"eg Bill\" [(ngModel)]=\"listRequest.filter\" (input)=\"initContactList(listRequest)\">\n        </div>\n    </div>\n    <div class=\"contact-list\">\n        <ul>\n            <li *ngFor=\"let data of listResponse?.data\">\n                <div class=\"contact\">\n                    <div class=\"image\"><img [src]=\"domainSanitizer.bypassSecurityTrustUrl(data.photoUrl)\"></div>\n                    <div class=\"name\">{{ data.name }}</div>\n                </div>\n            </li>\n        </ul>\n    </div>\n    <div class=\"pagination\">\n        <div class=\"page-counter\">\n          <span>Number of Items: {{ listResponse?.total }}</span>\n          <span>Page {{ listResponse?.page + ' of ' + getTotalNumberOfPages() }}</span>\n        </div>\n        <ul>\n          <li *ngIf=\"listResponse?.page > 1\" (click)=\"goPrevious()\"><< Previous</li>\n          <li *ngIf=\"listResponse?.page < getTotalNumberOfPages()\" (click)=\"goNext()\">Next >></li>\n        </ul>\n    </div>\n  <div class=\"footer\"></div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class ListRequest {\n    page: number;\n    limit: number;\n    sortField: string;\n    sortOrder: string;\n    filter: string;\n\n    constructor(page: number, limit: number, sortField: string, sortOrder: string, filter: string) {\n        this.page = page;\n        this.limit = limit;\n        this.sortField = sortField;\n        this.sortOrder = sortOrder;\n        this.filter = filter;\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ContactListResponse} from '../dto/ContactListResponse';\nimport {environment} from '../../environments/environment';\nimport {ListRequest} from '../dto/ListRequest';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  baseUrl: string = environment.baseUrl + 'api/v1/contacts';\n\n  constructor(private http: HttpClient) { }\n\n  public getContactList(listRequest: ListRequest): Observable<ContactListResponse> {\n      const params = new HttpParams()\n        .set('page', listRequest.page + '')\n        .set('limit', listRequest.limit + '')\n        .set('sort-field', listRequest.sortField)\n        .set('sort-order', listRequest.sortOrder)\n        .set('filter', listRequest.filter);\n      return this.http.get<ContactListResponse>(this.baseUrl, {params});\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseUrl: 'http://localhost:7000/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}